// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String?        @unique
  hashedRefreshToken String?        @unique
  authProvider       String?
  accountStatus      AccountStatus  @default(INACTIVE)
  emailVerifiedAt    DateTime?
  Verification       Verification[]
  events             Event[]
  profile            Profile?
  notifcations       Notification[]
  passwordResetToken resetToken?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt()
}

model Profile {
  id              String  @id @default(uuid())
  profileImageUrl String?
  fullname        String?
  phoneNumber     Int?
  name            String?
  address         String?
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @unique
}

// don't forget to add profile model => fullname, address, phonenumber and image

model Event {
  id                     String      @id @default(uuid())
  name                   String
  description            String
  date                   DateTime    @db.Date
  eventStartTime         DateTime    @db.Time()
  eventEndTime           DateTime    @db.Time()
  qrCodeValidityDuration Int
  qrCodeUrl              String
  status                 EventStatus @default(DRAFTED)
  uniqueCode             String?     @unique
  scans                  Int?         @default(0)
  clicks                 Int?         @default(0)
  notifications          Notification[]
  winners                Winner[]
  prizes                 Prize[]
  user                   User        @relation(fields: [userId], references: [id])
  userId                 String
  createdAt              DateTime    @default(now())
}


model Verification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Prize {
  id          String      @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  quantity    Int         @default(1)
  status      PrizeStatus @default(AVAILABLE)
  event       Event       @relation(fields: [eventId], references: [id])
  eventId     String
  winners     Winner?
}

model Winner {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String   @unique
  selectedAt  DateTime @default(now())
  name        String
  email       String
  phoneNumber Int
  address     String
  prize       Prize    @relation(fields: [prizeId], references: [id])
  prizeId     String   @unique
}

model resetToken {
  id             String   @id @default(uuid())
  token          String   @unique
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  expirationDate DateTime
}

model Notification{
  id String @id @default(uuid())
  userId String
  eventId String?
  title String
  message String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
}

enum EventStatus {
  DRAFTED
  UPCOMING
  ACTIVE
  CLOSED
}

enum PrizeStatus {
  AVAILABLE
  ASSIGNED
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}
